%% State Space Control
clc
clear
%% variables del sistema
A1=1.8869;
A2=1.8869;
AC=0.0045;
Ab=0.0045;
R1=1;
R2=1;
g=9.81;

alpha= (sqrt(2*g))*(Ab*R1);
beta= (sqrt(2*g))*(AC*R2);

A = [ -alpha/A1   alpha/A1   
     alpha/A2  -(alpha+beta)/A2 ];

B =  [ 1/A1
        0 ];

C = [ 0  1 ];

D = [0];

%% find poles of the system

poles = eig(A)

%% Open loop response

t = 0:0.01:5;
u = ones(size(t));
x0 = [2 0.2];

sys = ss(A,B,C,0);

[y,t,x] = lsim(sys,u,t,x0);
plot(t,y);
title('Open-Loop Response to Non-Zero Initial Condition')
xlabel('Time (sec)')
ylabel('Altura (m)')

%% Controlling to an equilibrium

p1 = -1 + 1i;
p2 = -1 - 1i;

K = place(A,B,[p1 p2]);
sys_cl = ss(A-B*K,B,C,0);

lsim(sys_cl,u,t,x0);
title('Controlling to an equilibrium')
xlabel('Time (sec)')
ylabel('Altura (m)')

%% Reference tracking

t = 0:0.01:20;
u = ones(size(t));

sys_cl = ss(A-B*K,B,C,0);

lsim(sys_cl,u,t);
title('Reference tracking')
xlabel('Time (sec)')
ylabel('Altura (m)')
axis([0 2 0 2E-2])

%% Including the scaling factor

Nbar = rscale(sys,K)

lsim(sys_cl,Nbar*u,t)
title('Including the scaling factor')
xlabel('Time (sec)')
ylabel('Altura (m)')    
axis([0 20 0 2])

%% Observers

op1 = -100;
op2 = -101;
op3 = -102;

L = place(A',C',[op1 op2 op3])';

At = [ A-B*K             B*K
       zeros(size(A))    A-L*C ];

Bt = [    B*Nbar
       zeros(size(B)) ];

Ct = [ C    zeros(size(C)) ];

sys = ss(At,Bt,Ct,0);
lsim(sys,ones(size(t)),t,[x0 x0]);

title('Linear Simulation Results (with observer)')
xlabel('Time (sec)')
ylabel('Ball Position (m)')

%% State values and estimated values

t = 0:1E-6:0.1;
x0 = [0.01 0.5 -5];
[y,t,x] = lsim(sys,zeros(size(t)),t,[x0 x0]);

n = 3;
e = x(:,n+1:end);
x = x(:,1:n);
x_est = x - e;

% Save state variables explicitly to aid in plotting
h = x(:,1); h_dot = x(:,2); i = x(:,3);
h_est = x_est(:,1); h_dot_est = x_est(:,2); i_est = x_est(:,3);

plot(t,h,'-r',t,h_est,':r',t,h_dot,'-b',t,h_dot_est,':b',t,i,'-g',t,i_est,':g')
legend('h','h_{est}','hdot','hdot_{est}','i','i_{est}')
xlabel('Time (sec)')

%%

function[Nbar]=rscale(a,b,c,d,k)
% Given the single-input linear system: 
%       .
%       x = Ax + Bu
%       y = Cx + Du
% and the feedback matrix K,
% 
% the function rscale(sys,K) or rscale(A,B,C,D,K) 
% finds the scale factor N which will 
% eliminate the steady-state error to a step reference 
% for a continuous-time, single-input system
% with full-state feedback using the schematic below:
%
%                         /---------\
%      R         +     u  | .       |
%      ---> N --->() ---->| X=Ax+Bu |--> y=Cx ---> y
%                -|       \---------/
%                 |             | 
%                 |<---- K <----|
%
%8/21/96 Yanjie Sun of the University of Michigan
%        under the supervision of Prof. D. Tilbury
%6/12/98 John Yook, Dawn Tilbury revised

error(nargchk(2,5,nargin));

% --- Determine which syntax is being used ---
nargin1 = nargin;
if (nargin1==2),	% System form
		[A,B,C,D] = ssdata(a);
		K=b;
elseif (nargin1==5), % A,B,C,D matrices
		A=a; B=b; C=c; D=d; K=k;
else error('Input must be of the form (sys,K) or (A,B,C,D,K)')
end;

% compute Nbar
s = size(A,1);
Z = [zeros([1,s]) 1];
N = inv([A,B;C,D])*Z';
Nx = N(1:s);
Nu = N(1+s);
Nbar=Nu+K*Nx;

end
